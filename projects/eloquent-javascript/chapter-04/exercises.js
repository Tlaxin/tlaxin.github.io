////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  let myArr = [];
  if (step === undefined) {
    step = 1;
  }
    if(start < end && step > 0){
        for(var i = start; i <= end; i += step){
          myArr.push(i); 
        }
    } else if (start > end && step < 0){
        for(var j = start; j >= end; j += step){
          myArr.push(j); 
        }
    }
  return myArr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
let num = 0;
  for(var i = 0; i < arr.length; i++){
    num += arr[i];
  }
  return num;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
let myArr = [];
 for(var i = arr.length - 1; i > -1; i--){
   myArr.push(arr[i]);
 }
return myArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function reverseArrayInPlace(arr) {
return arr.reverse();
}
////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function arrayToList(array) {
  let list = null;
  for (let i = array.length - 1; i >= 0; i--) {
    list = { value: array[i], rest: list };
  }
  return list;
};


////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
    let result = [];
  if (typeof list === 'undefined' || list.value === undefined || list.rest === undefined) {
    return result;
  } else {
    result.push(list.value);
    //can use while loops to loop  untill something is not true
    while (list.hasOwnProperty('rest') && list.rest !== null) {
      list = list.rest;
      if (list.hasOwnProperty('value')) {
      	result.push(list.value);
      }
    }
  }
  return result;
}


////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list){
  return {
    value: element,
    rest: list
  };
}
////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  return listToArray(list)[number];
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function deepEqual(obj1, obj2) {
  if (obj1 === obj2) {
    // items are identical
    return true;
  } else if (typeof obj1 === 'object' && obj1 !== null && typeof obj2 === 'object' && obj2 !== null) {
  	// items are objects so compare props
  	//combine keys from both obj to 1 array
    let keys = Object.keys(obj1).concat(Object.keys(obj2));
    // filter out duplicate keys
      keys = keys.filter(function (value, index, array) { 
          return array.indexOf(value) === index;
	      }
      );
    for (var prop of keys) {
      //if nested obj or arr
        if (typeof obj1[prop] === 'object' && typeof obj2[prop] === 'object') {
          if (deepEqual(obj1[prop], obj2[prop]) === false) {
            return false;
          }
        } else if (obj1[prop] !== obj2[prop]) {
            return false;
        }
    }
      return true;
  } else {
     return false; 
  }
}


////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
